//Product of Array Except Self
//METHOD 1
#include<iostream>
using namespace std;
void productofarray(int arr[],int n){
    int output[n];
    for(int i=0;i<n;i++){
        int product=1;
        for(int j=0;j<n;j++){
            if(j==i){
                continue;
            }
            product=product*arr[j];
        }
        output[i]=product;
    }
    for(int i=0;i<n;i++){
        cout<<output[i]<<" ";
    }
}
int main(){
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    productofarray(arr,n);
    return 0;
}

//METHOD 2
#include<iostream>
using namespace std;
void productofarray(int arr[],int n){
    int output[n];
    int product=1;
    for(int i=0;i<n;i++){
        product=product*arr[i];
    }
    for(int i=0;i<n;i++){
        arr[i]=product/arr[i];
        cout<<arr[i]<<" ";
    }
}
int main(){
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    productofarray(arr,n);
    return 0;
}

//METHOD 3
vector<int> productExceptSelf(vector<int>& nums) {
        int product=1;
        int n=nums.size();
        vector<int> left;
        int right[n];
        vector<int> ans;
        for(int i=0;i<n;i++){
            product=product*nums[i];
            left.push_back(product);
        }
        product=1;
        for(int j=n-1;j>=0;j--){
            product=product*nums[j];
            right[j]=product;
        }
        for(int i=0;i<n;i++){
            if(i==0){
                ans.push_back(right[1]);
            }
            else if(i==n-1){
                ans.push_back(left[n-2]);
            }
            else{
                ans.push_back(left[i-1]*right[i+1]);
            }
        }
        return ans;   
    }
